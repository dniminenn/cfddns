name: Build and Release

on:
    push:
        tags:
            - "v*.*"
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest

        strategy:
            fail-fast: false
            matrix:
                goos: [linux, darwin, windows, freebsd]
                goarch: [amd64]

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.23.1"
                  check-latest: true

            - name: Install dependencies
              run: go mod download

            - name: Get the latest commit hash
              id: get_commit
              run: echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

            - name: Build
              id: build
              env:
                  GOOS: ${{ matrix.goos }}
                  GOARCH: ${{ matrix.goarch }}
                  VERSION: ${{ github.ref_type == 'tag' && github.ref_name || env.commit_hash }}
              run: |
                  set -e
                  APP_NAME="cfddns"
                  OUTPUT_NAME="${APP_NAME}_${VERSION}_${GOOS}_${GOARCH}"

                  if [ "$GOOS" == "windows" ]; then
                    BINARY_NAME="${APP_NAME}.exe"
                    ARCHIVE_EXT="zip"
                  else
                    BINARY_NAME="$APP_NAME"
                    ARCHIVE_EXT="tar.gz"
                  fi

                  mkdir -p "build/$OUTPUT_NAME"
                  env GOOS=$GOOS GOARCH=$GOARCH go build -o "build/$OUTPUT_NAME/$BINARY_NAME" main.go

                  # Package the binary
                  cd "build/$OUTPUT_NAME"
                  if [ "$GOOS" == "windows" ]; then
                    zip -r "../${OUTPUT_NAME}.${ARCHIVE_EXT}" "$BINARY_NAME"
                  else
                    tar -czf "../${OUTPUT_NAME}.${ARCHIVE_EXT}" "$BINARY_NAME"
                  fi
                  cd ../..
                  rm -rf "build/$OUTPUT_NAME"

                  # Set outputs
                  echo "archive_name=${OUTPUT_NAME}.${ARCHIVE_EXT}" >> $GITHUB_OUTPUT
                  echo "archive_path=build/${OUTPUT_NAME}.${ARCHIVE_EXT}" >> $GITHUB_OUTPUT

            - name: Create GitHub Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.CFDDNS_DEPLOY_TOKEN }}
              with:
                  tag_name: ${{ github.ref_type == 'tag' && github.ref_name || env.commit_hash }}
                  release_name: ${{ github.ref_type == 'tag' && github.ref_name || env.commit_hash }}
                  draft: false
                  prerelease: ${{ github.event_name == 'workflow_dispatch' }}

            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.CFDDNS_DEPLOY_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ${{ steps.build.outputs.archive_path }}
                  asset_name: ${{ steps.build.outputs.archive_name }}
                  asset_content_type: application/octet-stream
